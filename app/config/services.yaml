# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
  twitter_api_settings:
    oauth_access_token: "%twitter_oauth_access_token%"
    oauth_access_token_secret: "%twitter_oauth_access_token_secret%"
    consumer_key: "%twitter_consumer_key%"
    consumer_secret: "%twitter_consumer_secret%"
  locale: fr
  app.pages_backoffice:
    accueil:
      nom: 'Accueil'
      niveau: 'ROLE_MEMBER_EXPIRED'
      url: '/admin'
      extra_routes:
        - admin_home
    membres:
      nom: 'Membres'
      niveau: 'ROLE_ADMIN'
      icon: 'user'
      elements:
        personnes_physiques:
          nom: 'Personnes physiques'
          niveau: 'ROLE_ADMIN'
          url: '/admin/members/users'
          extra_routes:
            - admin_slack_members_check
            - admin_members_user_list
            - admin_members_user_add
            - admin_members_user_edit
        personnes_morales:
          nom: 'Personnes morales'
          niveau: 'ROLE_ADMIN'
          url: '/admin/members/companies'
          extra_routes:
            - admin_members_company_list
            - admin_members_company_add
            - admin_members_company_edit
        relances_personnes_physiques:
          nom: 'Relances cotisations'
          niveau: 'ROLE_ADMIN'
          url: '/admin/association/relances/1'
          extra_routes:
            - admin_relances
        reporting:
          nom: 'Reporting'
          niveau: 'ROLE_ADMIN'
          url: '/admin/members/reporting'
          extra_routes:
            - admin_members_reporting
        badges:
          nom: 'Badges'
          niveau: 'ROLE_ADMIN'
          url: '/admin/members/badges'
          extra_routes:
            - admin_members_badges_index
            - admin_members_badges_new
        assemblee_generale:
          nom: 'Assemblée générale'
          niveau: 'ROLE_ADMIN'
          url: '/admin/members/general_meeting'
          extra_routes:
            - admin_members_general_meeting
            - admin_members_general_meeting_prepare
    veille:
      nom: "Veille"
      niveau: "ROLE_VEILLE"
      icon: 'bullhorn'
      elements:
        veille_ generer_campagne:
          nom: "Campagnes"
          niveau: "ROLE_VEILLE"
          url: '/admin/techletter'
          extra_routes:
            - admin_techletter_index
            - admin_techletter_generate
        techletter:
          nom: 'Abonnés'
          niveau: 'ROLE_ADMIN'
          url: '/admin/techletter/members'
          extra_routes:
            - admin_techletter_members
        history:
          nom: 'Historique'
          niveau: 'ROLE_VEILLE'
          url: '/admin/techletter/history'
          extra_routes:
            - admin_techletter_history
    site:
      nom: 'Site'
      niveau: 'ROLE_SITE'
      icon: "paint brush"
      elements:
        site_feuilles:
          nom: 'Feuilles'
          niveau: 'ROLE_SITE'
        site_rubriques:
          nom: 'Rubriques'
          niveau: 'ROLE_SITE'
        site_articles:
          nom: 'Articles'
          niveau: 'ROLE_SITE'
    antenne:
      nom: 'Antennes AFUP'
      niveau: 'ROLE_ANTENNE'
      elements:
        rendez_vous:
          nom: 'Rendez-vous'
          niveau: 'ROLE_ANTENNE'
          url: '/admin/rendezvous/list'
          extra_routes:
            - admin_rendezvous_list
            - admin_rendezvous_prepare
            - admin_rendezvous_confirmation_send
            - admin_rendezvous_fill
            - admin_rendezvous_export
            - admin_rendezvous_attendees_list
            - admin_rendezvous_attendee_add
            - admin_rendezvous_attendee_edit
            - admin_rendezvous_attendee_delete
        antenne:
          nom: 'Liste des antennes'
          niveau: 'ROLE_ANTENNE'
    forum:
      nom: 'Événements'
      niveau: 'ROLE_FORUM'
      icon: "globe"
      elements:
        forum_gestion:
          nom: 'Gestion événéments'
          niveau: 'ROLE_ADMIN'
          url: '/admin/event/list'
          extra_routes:
            - admin_event_list
        forum_salle:
          nom: 'Salles'
          niveau: 'ROLE_ADMIN'
          url: '/admin/event/room'
          extra_routes:
            - admin_event_room
        forum_suivi:
          nom: 'Suivi'
          niveau: 'ROLE_FORUM'
          url: '/admin/event/stats'
          extra_routes:
            - admin_event_stats
        forum_inscriptions:
          nom: 'Inscriptions'
          niveau: 'ROLE_FORUM'
        forum_pending_bankwires:
          nom: 'Virements en attente'
          niveau: 'ROLE_ADMIN'
          url: '/admin/event/bankwires'
          extra_routes:
            - admin_event_pending_bankwires
        admin_event_sponsor_ticket:
          nom: 'Tokens sponsors'
          niveau: 'ROLE_ADMIN'
          url: '/admin/event/sponsor'
          extra_routes:
            - admin_event_sponsor_ticket
        admin_event_special_price:
          nom: 'Tokens visiteurs'
          niveau: 'ROLE_ADMIN'
          url: '/admin/event/special_price'
          extra_routes:
            - admin_event_special_price
        admin_event_prices:
          nom: 'Tarifications'
          niveau: 'ROLE_FORUM'
          url: '/admin/event/prices'
          extra_routes:
            - admin_event_prices
        forum_facturation:
          nom: "Factures d'événément"
          niveau: 'ROLE_ADMIN'
        forum_sessions:
          nom: 'Conférences'
          niveau: 'ROLE_FORUM'
        forum_vote_github:
          nom: 'Votes visiteurs'
          niveau: 'ROLE_FORUM'
          url: '/admin/vote/'
          extra_routes:
            - admin_vote
        forum_conferenciers:
          nom: 'Speakers'
          niveau: 'ROLE_FORUM'
          url: '/admin/speaker/'
          extra_routes:
            - admin_speaker_list
            - admin_speaker_add
            - admin_speaker_edit
        admin_event_speakers_management:
          nom: 'Venue speakers'
          niveau: 'ROLE_FORUM'
          url: '/admin/event/speakers-management'
          extra_routes:
            - admin_event_speakers_management
        forum_planning:
          nom: 'Planning'
          niveau: 'ROLE_FORUM'
    tresorerie:
      nom: 'Trésorerie'
      niveau: 'ROLE_ADMIN'
      icon: "money bill alternate"
      elements:
        compta_devis:
          nom: 'Devis'
          niveau: 'ROLE_ADMIN'
        compta_facture:
          nom: 'Factures'
          niveau: 'ROLE_ADMIN'
        compta_journal:
          nom: 'Journal'
          niveau: 'ROLE_ADMIN'
        compta_banque:
          nom: 'Compte banques'
          niveau: 'ROLE_ADMIN'
        compta_synthese:
          nom: 'Synthese événement'
          niveau: 'ROLE_ADMIN'
        compta_balance:
          nom: 'Balance comptable'
          niveau: 'ROLE_ADMIN'
        compta_bilan:
          nom: 'Bilan'
          niveau: 'ROLE_ADMIN'
        compta_conf_evenement:
          nom: 'Configuration'
          niveau: 'ROLE_ADMIN'
          extra_pages:
            - compta_conf_categorie
            - compta_conf_operation
            - compta_conf_reglement
            - compta_conf_compte
        compta_recherche:
          nom: 'Recherche comptable'
          niveau: 'ROLE_ADMIN'
    planete:
      nom: 'Planète PHP FR'
      niveau: 'ROLE_ADMIN'
      icon: "rss"
      elements:
        planete_flux:
          nom: 'Flux'
          niveau: 'ROLE_ADMIN'
          url: '/admin/planete/feeds'
          extra_routes:
            - admin_planete_feed_list
            - admin_planete_feed_add
            - admin_planete_feed_edit

        planete_billet:
          nom: 'Billets'
          niveau: 'ROLE_ADMIN'
          url: '/admin/planete/feed-articles'
          extra_routes:
            - admin_planete_feed_article_list
    divers:
      nom: 'Divers'
      niveau: 'ROLE_ADMIN'
      icon: "tag"
      elements:
        configuration:
          nom: 'Configuration'
          niveau: 'ROLE_ADMIN'
        membre_administrateur:
          nom: 'Administrateurs du site'
          niveau: 'ROLE_ADMIN'
        logs:
          nom: 'Logs'
          niveau: 'ROLE_ADMIN'
        forum_partenaire:
          nom: 'Sponsors/Partenaires'
          niveau: 'ROLE_ADMIN'
    connexion:
      nom: 'Connexion'
      masquee: true
      niveau: 'ROLE_USER'
    inscription:
      nom: 'Inscription'
      masquee: true
      niveau: 'ROLE_USER'
  paybox_ips:
    - '194.2.122.158'
    - '194.2.122.190'
    - '194.2.160.64'
    - '194.2.160.66'
    - '194.2.160.75'
    - '194.2.160.80'
    - '194.2.160.82'
    - '194.2.160.91'
    - '195.101.99.73'
    - '195.101.99.76'
    - '195.25.67.0'
    - '195.25.67.11'
    - '195.25.67.2'
    - '195.25.67.22'
    - '195.25.7.146'
    - '195.25.7.157'
    - '195.25.7.159'
    - '195.25.7.166'

services:
    _defaults:
        public: true

    AppBundle\Controller\Event\:
        resource: '../../sources/AppBundle/Controller/Event/*'
        autowire: true
        autoconfigure: true

    AppBundle\Controller\Admin\Event\:
        resource: '../../sources/AppBundle/Controller/Admin/Event/*'
        autowire: true
        autoconfigure: true

    AppBundle\Controller\Admin\Membership\:
        resource: '../../sources/AppBundle/Controller/Admin/Membership/*'
        autowire: true
        autoconfigure: true

    AppBundle\Controller\Admin\Members\GeneralMeeting\:
        resource: '../../sources/AppBundle/Controller/Admin/Members/GeneralMeeting/*'
        autowire: true
        autoconfigure: true

    AppBundle\Command\GeneralMeetupNotificationCommand:
        autowire: true
        autoconfigure: true

    AppBundle\GeneralMeeting\GeneralMeetingRepository:
        autowire: true

    AppBundle\Controller\Admin\SlackMembers\CheckMembersAction:
        autowire: true
        autoconfigure: true

    AppBundle\Controller\Admin\Speaker\ExportAction:
        autowire: true
        autoconfigure: true

    AppBundle\Controller\Admin\Talk\:
        resource: '../../sources/AppBundle/Controller/Admin/Talk/*'
        autowire: true
        autoconfigure: true

    AppBundle\Controller\MembershipAdmin\ReportingAction:
        autowire: true
        autoconfigure: true

    AppBundle\Command\IndexTalksCommand:
        autowire: true
        autoconfigure: true

    AppBundle\Controller\Admin\:
        resource: '../../sources/AppBundle/Controller/Admin/*'
        autowire: true
        autoconfigure: true

    AppBundle\Controller\Admin\Members\BadgeNewAction:
        autowire: true
        arguments:
            $storageDir: '%kernel.project_dir%/htdocs/uploads/badges'

    AppBundle\Controller\Admin\GetMenuAction:
        autowire: true
        arguments:
          $backOfficePages: '%app.pages_backoffice%'

    AppBundle\Controller\BlocksHandler: ~

    AppBundle\Security\MyGithubAuthenticator:
        autowire: true

    AppBundle\Controller\SpeakerSuggestionController:
        autowire: true

    AppBundle\Controller\PayboxRedirectAction:
        autowire: true

    AppBundle\Controller\Admin\TechLetter\TechLetterGenerateController:
        autowire: true

    AppBundle\Indexation\Talks\Runner:
        autowire: true

    AppBundle\Event\Speaker\SpeakerPage:
        autowire: true

    AppBundle\Event\Form\EventSelectType:
        autowire: true
        autoconfigure: true

    AppBundle\Event\Model\Repository\GithubUserRepository:
        class: AppBundle\Event\Model\Repository\GithubUserRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\GithubUserRepository]

    AppBundle\Association\Model\Repository\CompanyMemberInvitationRepository:
        class: AppBundle\Association\Model\Repository\CompanyMemberInvitationRepository
        factory: ['@ting', get]
        arguments: [AppBundle\Association\Model\Repository\CompanyMemberInvitationRepository]

    AppBundle\Event\Model\Repository\RoomRepository:
        class: AppBundle\Event\Model\Repository\RoomRepository
        factory: ['@ting', get]
        arguments: [AppBundle\Event\Model\Repository\RoomRepository]

    AppBundle\Association\Model\Repository\SubscriptionReminderLogRepository:
        class: AppBundle\Association\Model\Repository\SubscriptionReminderLogRepository
        factory: ['@ting', get]
        arguments: [AppBundle\Association\Model\Repository\SubscriptionReminderLogRepository]

    AppBundle\Twig\TwigExtension:
        arguments: ['@AppBundle\Routing\LegacyRouter', "@Parsedown", '@AppBundle\Email\Parsedown', "@service_container"]
        tags:
            -  { name: twig.extension }

    AppBundle\Twig\AssetsExtension:
        arguments: ["%kernel.root_dir%"]
        tags:
            -  { name: twig.extension }

    AppBundle\Twig\OfficesExtension:
        tags:
            -  { name: twig.extension }

    AppBundle\Association\Form\HelpMessageExtension:
        class: AppBundle\Association\Form\HelpMessageExtension
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\FormType }

    AppBundle\Listener\LocaleListener:
        arguments: [ "%kernel.default_locale%" ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 100 }

    AppBundle\Listener\LegacySiteListener:
        autowire: true
        tags:
            - { name: kernel.event_listener, event: kernel.controller, priority: 100 }

    AppBundle\Event\Model\Repository\SpeakerRepository:
        class: AppBundle\Event\Model\Repository\SpeakerRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\SpeakerRepository]

    AppBundle\CFP\SpeakerFactory:
        arguments: ["@security.token_storage", '@AppBundle\Event\Model\Repository\SpeakerRepository']

    AppBundle\Security\TalkVoter:
        arguments: ['@AppBundle\Event\Model\Repository\SpeakerRepository']
        tags:
          - { name: security.voter }
        public: false

    AppBundle\CFP\PhotoStorage:
        arguments:
          - "%kernel.root_dir%/../htdocs/uploads/speakers"
          - "/uploads/speakers"
          - "%kernel.root_dir%/../htdocs"

    AppBundle\Event\Form\SpeakerFormDataFactory:
      autowire: true

    AppBundle\Event\Invoice\InvoiceService:
      autowire: true

    Twig_Extensions_Extension_Intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    AppBundle\Association\Model\Repository\UserRepository:
        class: AppBundle\Association\Model\Repository\UserRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\UserRepository]

    AppBundle\Event\Model\Repository\TalkRepository:
        class: AppBundle\Event\Model\Repository\TalkRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TalkRepository]

    AppBundle\Event\Model\Repository\TalkInvitationRepository:
        class: AppBundle\Event\Model\Repository\TalkInvitationRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TalkInvitationRepository]

    AppBundle\Event\Model\Repository\TalkToSpeakersRepository:
        class: AppBundle\Event\Model\Repository\TalkToSpeakersRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TalkToSpeakersRepository]

    AppBundle\Event\Model\Repository\VoteRepository:
        class: AppBundle\Event\Model\Repository\VoteRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\VoteRepository]

    AppBundle\Association\Model\Repository\CompanyMemberRepository:
        class: AppBundle\Association\Model\Repository\CompanyMemberRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\CompanyMemberRepository]

    AppBundle\Security\LegacyAuthenticator:
        autowire: true

    AppBundle\Security\LegacyHashAuthenticator:
        autowire: true

    AppBundle\Validator\Constraints\UniqueEntityValidator:
        autowire: true
        tags:
            - { name: validator.constraint_validator }

    AppBundle\LegacyModelFactory:
        autowire: true


    AppBundle\Association\CompanyMembership\SubscriptionManagement:
        autowire: true

    AppBundle\Payment\PayboxFactory:
        autowire: true

    slack_members_legacy_client:
        class: AppBundle\Slack\LegacyClient
        arguments: ["%slack_members_legacy_token%"]

    AppBundle\Slack\UsersClient:
        autowire: true
        arguments: ["%slack_membre_token%", "%slack_api_url%"]

    AppBundle\Slack\UsersChecker:
        autowire: true

    AppBundle\Slack\MessageFactory:
        autowire: true

    AppBundle\Notifier\SlackNotifier:
        arguments: ["%slack_url%", '@AppBundle\Slack\MessageFactory', "@jms_serializer.serializer"]

    AppBundle\Routing\LegacyRouter:
        autowire: true

    AlgoliaSearch\Client:
        arguments: ["%algolia_app_id%", "%algolia_backend_api_key%"]

    AppBundle\Joindin\JoindinComments:
        arguments: ["@cache.system"]

    AppBundle\Joindin\JoindinTalk:
        arguments: ["@cache.system"]

    TwitterAPIExchange:
        class: TwitterAPIExchange
        arguments: ["%twitter_api_settings%"]

    Mailchimp\Mailchimp:
        arguments: ["%mailchimp_api_key%"]
        public: false

    AppBundle\Mailchimp\Mailchimp:
        arguments: ['@Mailchimp\Mailchimp']

    # Ne pas utiliser le nom de la classe pour le service car elle est déjà utilisé pour un autre service.
    app.mailchimp_techletter_client:
        class: Mailchimp\Mailchimp
        arguments: ["%mailchimp_techletter_api_key%"]
        public: false

    # Ne pas utiliser le nom de la classe pour le service car elle est déjà utilisé pour un autre service.
    app.mailchimp_techletter_api:
        class: AppBundle\Mailchimp\Mailchimp
        arguments: ["@app.mailchimp_techletter_client"]

    # Ne pas utiliser le nom de la classe pour le service car elle est déjà utilisé pour un autre service.
    app.techletter_mailchimp_synchronizer:
        class: AppBundle\TechLetter\MailchimpSynchronizer
        arguments: ["@app.mailchimp_techletter_api", '@AppBundle\Association\Model\Repository\TechletterSubscriptionsRepository', "%mailchimp_techletter_list%"]

    app.mailchimp_members_auto_synchronizer:
        class: AppBundle\Mailchimp\MailchimpMembersAutoListSynchronizer
        arguments: ['@AppBundle\Mailchimp\Mailchimp', '@AppBundle\Association\Model\Repository\UserRepository', "%mailchimp_members_list%"]

    Afup\Site\Utils\Configuration:
      arguments: ['%kernel.project_dir%/configs/application/config.php']

    AppBundle\Email\Mailer\Mailer:
        autowire: true

    AppBundle\Email\Mailer\Adapter\MailerAdapter:
      class: AppBundle\Email\Mailer\Adapter\PhpMailerAdapter
      factory: [AppBundle\Email\Mailer\Adapter\PhpMailerAdapter, createFromConfiguration]
      arguments: ['@Afup\Site\Utils\Configuration']

    AppBundle\Email\Emails:
        arguments: ['@AppBundle\Email\Mailer\Mailer']

    AppBundle\Association\CompanyMembership\InvitationMail:
        autowire: true

    AppBundle\Association\CompanyMembership\UserCompany:
        autowire: true

    AppBundle\Association\UserMembership\UserService:
        autowire: true

    AppBundle\Association\Form\UserEditFormDataFactory:
        autowire: true

    AppBundle\Offices\OfficesCollection:
        autowire: true

    AppBundle\Mailchimp\EventListener:
        arguments: ['@AppBundle\Mailchimp\Mailchimp', "%mailchimp_members_list%"]
        tags:
          - { name: kernel.event_listener, event: user.disabled, method: onUserDisabled }

    AppBundle\Model\CollectionFilter:
        autowire: true

    AppBundle\Event\Talk\InvitationFormHandler:
      autowire: true

    AppBundle\Event\Talk\TalkFormHandler:
      autowire: true

    CCMBenchmark\TingBundle\Repository\RepositoryFactory: '@ting'
    CCMBenchmark\Ting\UnitOfWork: '@ting.unitofwork'
    KnpU\OAuth2ClientBundle\Client\ClientRegistry: '@knpu.oauth2.registry'

    AppBundle\Security\ActionThrottling\LogRepository:
        class: AppBundle\Security\ActionThrottling\LogRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Security\ActionThrottling\LogRepository]

    AppBundle\Event\Model\Repository\InvoiceRepository:
        class: AppBundle\Event\Model\Repository\InvoiceRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\InvoiceRepository]

    AppBundle\Association\Model\Repository\TechletterSubscriptionsRepository:
        class: AppBundle\Association\Model\Repository\TechletterSubscriptionsRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\TechletterSubscriptionsRepository]

    AppBundle\Association\Model\Repository\GeneralMeetingResponseRepository:
        class: AppBundle\Association\Model\Repository\GeneralMeetingResponseRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\GeneralMeetingResponseRepository]

    AppBundle\Security\ActionThrottling\ActionThrottling:
        autowire: true

    AppBundle\Event\Model\TicketFactory:
        autowire: true

    AppBundle\Event\Model\InvoiceFactory:
        autowire: true

    AppBundle\Event\Model\Repository\EventRepository:
        class: AppBundle\Event\Model\Repository\EventRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\EventRepository]

    AppBundle\Event\Model\Repository\EventStatsRepository:
        autowire: true

    AppBundle\Event\Model\Repository\BadgeRepository:
        class: AppBundle\Event\Model\Repository\BadgeRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\BadgeRepository]

    AppBundle\Event\Model\Repository\UserBadgeRepository:
        class: AppBundle\Event\Model\Repository\UserBadgeRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\UserBadgeRepository]

    AppBundle\Event\Model\Repository\SponsorTicketRepository:
        class: AppBundle\Event\Model\Repository\SponsorTicketRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\SponsorTicketRepository]

    AppBundle\Event\Model\Repository\TicketRepository:
        class: AppBundle\Event\Model\Repository\TicketRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TicketRepository]

    AppBundle\Event\Model\Repository\TicketTypeRepository:
        class: AppBundle\Event\Model\Repository\TicketTypeRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TicketTypeRepository]

    AppBundle\Event\Model\Repository\TicketEventTypeRepository:
        class: AppBundle\Event\Model\Repository\TicketEventTypeRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TicketEventTypeRepository]

    AppBundle\Event\Model\Repository\TicketSpecialPriceRepository:
        class: AppBundle\Event\Model\Repository\TicketSpecialPriceRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TicketSpecialPriceRepository]

    AppBundle\Groups\Model\Repository\MailingListRepository:
        class: AppBundle\Groups\Model\Repository\MailingListRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Groups\Model\Repository\MailingListRepository]

    AppBundle\Site\Model\Repository\ArticleRepository:
        class: AppBundle\Site\Model\Repository\ArticleRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Site\Model\Repository\ArticleRepository]

    AppBundle\TechLetter\Model\Repository\SendingRepository:
        class: AppBundle\TechLetter\Model\Repository\SendingRepository
        factory: ["@ting", get]
        arguments: [AppBundle\TechLetter\Model\Repository\SendingRepository]

    AppBundle\Event\Ticket\SponsorTicketHelper:
        autowire: true

    AppBundle\Event\Ticket\SponsorTokenMail:
        autowire: true

    AppBundle\Event\Ticket\TicketTypeAvailability:
        autowire: true

    AppBundle\Association\Form\UserEditType:
        autowire: true
        autoconfigure: true

    AppBundle\Event\Form\TicketType:
        autowire: true
        tags:
          - {name: form.type}

    AppBundle\Site\Form\NewsFiltersType:
        autowire: true
        tags:
          - {name: form.type}

    AppBundle\Planete\FeedFormType:
        autowire: true
        autoconfigure: true

    Afup\Site\Forum\AppelConferencier:
        class: Afup\Site\Forum\AppelConferencier
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\AppelConferencier'

    Afup\Site\Forum\Forum:
        class: Afup\Site\Forum\Forum
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\Forum'

    Afup\Site\Utils\Pays:
        class: Afup\Site\Utils\Pays
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Utils\Pays'

    Afup\Site\Forum\Inscriptions:
        class: Afup\Site\Forum\Inscriptions
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\Inscriptions'

    Afup\Site\Association\Cotisations:
        class: Afup\Site\Association\Cotisations
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Association\Cotisations'

    Afup\Site\Association\Personnes_Morales:
        class: Afup\Site\Association\Personnes_Morales
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
            - 'Afup\Site\Association\Personnes_Morales'

    AppBundle\Event\Form\PurchaseType:
        autowire: true
        tags:
          - {name: form.type}

    AppBundle\Event\Validator\Constraints\LoggedInMemberValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\PublicTicketValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\CorporateMemberValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\AvailableTicketValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Ticket\PurchaseTypeFactory:
        autowire: true

    AppBundle\Event\Sponsorship\SponsorshipLeadMail:
        arguments: ['@AppBundle\Email\Mailer\Mailer', "@translator", "@logger", "%kernel.root_dir%/../htdocs/docs/"]

    Trello\Client:
        calls: [["authenticate", ["%trello_api_key%", "%trello_token%", !php/const Trello\Client::AUTH_URL_CLIENT_ID]]]

    Trello\Manager:
        arguments: ['@Trello\Client']

    AppBundle\Event\Model\Repository\LeadRepository:
        arguments:
            $logger: "@logger"
        autowire: true

    AppBundle\Event\AnonymousExport:
        autowire: true

    Parsedown:
        class: Parsedown
        autowire: true

    AppBundle\Email\Parsedown:
        autowire: true

    AppBundle\Event\JsonLd:
        autowire: true

    Google_Client:
        class: Google_Client
        calls:
          - ["setAuthConfig", ["%google_groups_api_key%"]]
          - ["setScopes", [[!php/const Google_Service_Directory::ADMIN_DIRECTORY_GROUP, !php/const Google_Service_Directory::ADMIN_DIRECTORY_GROUP_READONLY]]]
          - ["setSubject", ['admin-mailing-listes-api@afup.org']]

    Google_Service_Directory:
        class: Google_Service_Directory
        arguments: ["@Google_Client"]

    AppBundle\Groups\GroupRepository:
        autowire: true

    AppBundle\Association\Listener\MembersGroupsListener:
        arguments:
            $logger: "@logger"
        autowire: true
        tags:
          - { name: kernel.event_listener, event: member.new, method: onNewMemberEvent }

    AppBundle\Offices\OfficeFinder:
        arguments: ['@Geocoder\Provider\GoogleMaps']

    Geocoder\Provider\GoogleMaps:
        arguments: ['@Ivory\HttpAdapter\CurlHttpAdapter', null, null, true, "%google_maps_api_key%"]

    Ivory\HttpAdapter\CurlHttpAdapter:
        public: false

    AppBundle\Association\UserMembership\StatisticsComputer:
        autowire: true

    AppBundle\Association\UserMembership\SeniorityComputer:
        arguments: ['@Afup\Site\Association\Cotisations']

    AppBundle\Association\UserMembership\BadgesComputer:
        arguments: ['@AppBundle\Association\UserMembership\SeniorityComputer', '@AppBundle\Event\Model\Repository\EventRepository', '@AppBundle\Event\Model\Repository\UserBadgeRepository', '@AppBundle\Association\Model\Repository\GeneralMeetingResponseRepository']

    AppBundle\Event\Ticket\RegistrationsExportGenerator:
        arguments: ['@AppBundle\Offices\OfficeFinder', '@AppBundle\Association\UserMembership\SeniorityComputer', '@AppBundle\Event\Model\Repository\TicketRepository', '@AppBundle\Event\Model\Repository\InvoiceRepository', '@AppBundle\Association\Model\Repository\UserRepository']

    AppBundle\Event\Talk\ExportGenerator:
        arguments: ['@AppBundle\Event\Model\Repository\TalkRepository']

    AppBundle\Event\Speaker\ExportGenerator:
        arguments: ['@AppBundle\Event\Model\Repository\TalkRepository']

    AppBundle\SpeakerInfos\Form\HotelReservationType:
        arguments: ["@translator"]
        tags:
          - {name: form.type}

    AppBundle\Association\Form\UserBadgeType:
        arguments:
            - '@AppBundle\Event\Model\Repository\BadgeRepository'
            - '@AppBundle\Event\Model\Repository\UserBadgeRepository'
        tags:
            - {name: form.type}

    AppBundle\Subscriber\TalksSitemapSubscriber:
        arguments:
            - "@router"
            - "@ting"
        tags:
            - { name: "kernel.event_subscriber", priority: 100 }

    AppBundle\Association\Form\ContactDetailsType:
        arguments: ['@Afup\Site\Utils\Pays']
        tags: [form.type]

    Twig_Extensions_Extension_Text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }

    Doctrine\DBAL\Configuration: ~
    Doctrine\DBAL\Connection:
        factory: [Doctrine\DBAL\DriverManager, 'getConnection']
        arguments:
            - {url: 'mysql://%database_user%:%database_password%@%database_host%:%database_port%/%database_name%?charset=utf8mb4'}
            - '@Doctrine\DBAL\Configuration'

    AppBundle\Controller\Legacy\:
        resource: '../../sources/AppBundle/Controller/Legacy/*'
        autowire: true

    Symfony\Component\HttpFoundation\Session\SessionInterface:
        alias: 'session'
        public: true

    Symfony\Component\Routing\Generator\UrlGeneratorInterface:
        alias: 'router'
        public: true

    PlanetePHP\FeedRepository:
        autowire: true

    PlanetePHP\FeedArticleRepository:
        autowire: true

    PlanetePHP\FeedCrawler:
        autowire: true
        public: true

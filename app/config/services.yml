# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
    app.badge_dir: "%kernel.project_dir%/../htdocs/uploads/badges"
    app.members_logo_dir: "%kernel.project_dir%/../htdocs/uploads/members_logo"
    app.general_meetings_dir: "%kernel.project_dir%/../htdocs/uploads/general_meetings_reports"
    bluesky.api.identifier: "%bluesky_api_identifier%"
    bluesky.api.app_password: "%bluesky_api_app_password%"

services:
#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]
    _defaults:
        public: true

    _instanceof:
        AppBundle\SocialNetwork\Transport:
            tags: [ 'app.social_network.transport' ]

        # @see \AppBundle\DependencyInjection\TingRepositoryPass
        CCMBenchmark\Ting\Repository\Repository:
            tags: [ 'app.vendor.ting_repository' ]

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        public:    false
        arguments:
            - 'mysql:host=%database_host%;port=%database_port%;dbname=%database_name%'
            - db_username: '%database_user%'
              db_password: '%database_password%'
              lock_mode: !php/const Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler::LOCK_NONE

    AppBundle\:
        resource: '../../sources/AppBundle/'
        autowire: true
        autoconfigure: true
        public: false

    AppBundle\Command\:
        resource: '../../sources/AppBundle/Command/'
        autowire: true
        autoconfigure: true
        public: true

    AppBundle\Controller\:
        resource: '../../sources/AppBundle/Controller/'
        autowire: true
        autoconfigure: true
        public: true

    PlanetePHP\:
        resource: '../../sources/PlanetePHP'
        autowire: true
        autoconfigure: true
        public: false

    Psr\Clock\ClockInterface: '@AppBundle\Clock\NativeClock'

    ### Pages legacy - DEBUT
    # Les anciennes pages ont besoin que certains services soient publics,
    # car récupérés via `$container->get()`. Ils sont listés ici :

    AppBundle\Event\Ticket\TicketTypeAvailability:
        autowire: true

    AppBundle\Event\Invoice\InvoiceService:
        autowire: true

    AppBundle\Event\Model\Repository\EventStatsRepository:
        autowire: true

    ### Pages legacy - FIN

    AppBundle\Command\UpdateMailchimpMembersCommand:
        autoconfigure: true
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_api'
            $mailchimpMembersList: "%mailchimp_members_list%"

    AppBundle\Controller\Admin\Site\AddRubriqueAction:
        autowire: true
        autoconfigure: true
        public: false
        arguments :
            $storageDir: '%kernel.project_dir%/../htdocs/templates/site/images'

    AppBundle\Controller\Admin\Site\EditRubriqueAction:
        autowire: true
        autoconfigure: true
        public: false
        arguments :
            $storageDir: '%kernel.project_dir%/../htdocs/templates/site/images'

    AppBundle\Controller\Admin\Members\BadgeNewAction:
        autowire: true
        autoconfigure: true
        arguments:
            $storageDir: '%app.badge_dir%'

    AppBundle\Controller\Website\BadgeController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $storageDir: '%app.badge_dir%'

    AppBundle\Controller\Website\HomeController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $homeAlgoliaEnabled: '%home_algolia_enabled%'

    AppBundle\Controller\Website\MeetupsController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $algoliaAppId: '%algolia_app_id%'
            $algoliaFrontendApikey: '%algolia_frontend_api_key%'

    AppBundle\Controller\Website\CompanyPublicProfileController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $storageDir: '%app.members_logo_dir%'

    AppBundle\Controller\Website\Member\CompanyPublicProfileController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $storageDir: '%app.members_logo_dir%'

    AppBundle\Controller\Website\MemberShipController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $storageDir: '%app.general_meetings_dir%'
            $formLoginAuthenticator: '@security.authenticator.form_login.legacy_secured_area'

    AppBundle\Controller\Website\NewsController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $projectDir: '%kernel.project_dir%'

    AppBundle\Controller\Website\NewsletterController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $mailchimp: '@app.mailchimp_api'
            $mailchimpSubscribersList: '%mailchimp_subscribers_list%'

    AppBundle\Controller\Website\StaticController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $superAperoCsvUrl: '%super_apero_csv_url%'

    AppBundle\Controller\Website\TalksController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $algoliaAppId: '%algolia_app_id%'
            $algoliaFrontendApikey: '%algolia_frontend_api_key%'

    AppBundle\Controller\Website\TechletterController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $mailchimpTechletterWebhookKey: '%mailchimp_techletter_webhook_key%'

    AppBundle\Controller\Website\TechnoWatchController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $technoWatchCalendarKey: '%techno_watch_calendar_key%'
            $technoWatchCalendarUrl: '%techno_watch_calendar_url%'

    AppBundle\Controller\Admin\GetMenuAction:
        autowire: true
        arguments:
            $backOfficePages: '%app.pages_backoffice%'

    AppBundle\Controller\Admin\TechLetter\TechLetterGenerateController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $mailchimp: '@app.mailchimp_techletter_api'
            $techletterTestEmailAddress: '%techletter_test_email_address%'
            $mailchimpTechletterList: '%mailchimp_techletter_list%'

    AppBundle\Mailchimp\Runner:
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_api'
            $membersListId: '%mailchimp_members_list%'

    AppBundle\Controller\LegacyController:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $backOfficePages: '%app.pages_backoffice%'

    AppBundle\Association\Form\HelpMessageExtension:
        autowire: true
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\FormType }

    AppBundle\Listener\LocaleEventSubscriber:
        arguments: [ "%kernel.default_locale%" ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 100 }

    AppBundle\CFP\SpeakerFactory:
        autowire: true
        arguments:
            $tokenStorage: '@security.token_storage'

    AppBundle\Security\TalkVoter:
        arguments: ['@AppBundle\Event\Model\Repository\SpeakerRepository']
        tags:
          - { name: security.voter }
        public: false

    AppBundle\Security\LegacyHasher:
        autowire: true
        autoconfigure: true
        public: false

    AppBundle\CFP\PhotoStorage:
        arguments:
            $basePath: "%kernel.project_dir%/../htdocs/uploads/speakers"
            $publicPath: "/uploads/speakers"
            $legacyBasePath: "%kernel.project_dir%/../htdocs"

    AppBundle\SpeakerInfos\SpeakersExpensesStorage:
        autowire: true
        autoconfigure: true
        public: false
        arguments:
            $basePath: "%kernel.project_dir%/../htdocs/uploads/speaker_expenses"

    Twig_Extensions_Extension_Intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    AppBundle\Validator\Constraints\UniqueEntityValidator:
        autowire: true
        tags:
            - { name: validator.constraint_validator }

    AppBundle\Payment\PayboxFactory:
        autowire: true
        arguments: ["@router", "%paybox_domain_server%", "%paybox_secret_key%", "%paybox_site%", "%paybox_rang%", "%paybox_identifiant%"]

    AppBundle\Slack\LegacyClient:
        arguments: ["%slack_members_legacy_token%"]

    AppBundle\Slack\UsersClient:
        autowire: true
        arguments: ["%slack_membre_token%", "%slack_api_url%"]

    AppBundle\Notifier\SlackNotifier:
        arguments:
            $postUrl: "%slack_url%"
            $messageFactory: '@AppBundle\Slack\MessageFactory'
            $serializer: '@jms_serializer.serializer'
            $httpClient: '@http_client'

    Algolia\AlgoliaSearch\SearchClient:
        factory: [ Algolia\AlgoliaSearch\SearchClient, create ]
        arguments: ["%algolia_app_id%", "%algolia_backend_api_key%"]

    AppBundle\Joindin\JoindinComments:
        arguments: ["@cache.system"]

    AppBundle\Joindin\JoindinTalk:
        arguments: ["@cache.system"]

    # API/Client Meetup techletter
    app.mailchimp_techletter_client:
        class: DrewM\MailChimp\MailChimp
        arguments: ["%mailchimp_techletter_api_key%"]
        public: false
    app.mailchimp_techletter_api:
        class: AppBundle\Mailchimp\Mailchimp
        arguments: ["@app.mailchimp_techletter_client"]
        public: false

    # API/Client Meetup
    app.mailchimp_client:
        class: DrewM\MailChimp\MailChimp
        arguments: ["%mailchimp_api_key%"]
        public: false
    app.mailchimp_api:
        class: AppBundle\Mailchimp\Mailchimp
        arguments: ["@app.mailchimp_client"]
        public: false

    AppBundle\TechLetter\MailchimpSynchronizer:
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_techletter_api'
            $listId: "%mailchimp_techletter_list%"

    AppBundle\Mailchimp\MailchimpMembersAutoListSynchronizer:
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_api'
            $listId: "%mailchimp_members_list%"

    Afup\Site\Utils\Configuration:
        autowire: true

    AppBundle\Email\Mailer\Adapter\MailerAdapter:
      class: AppBundle\Email\Mailer\Adapter\PhpMailerAdapter
      factory: [AppBundle\Email\Mailer\Adapter\PhpMailerAdapter, createFromConfiguration]
      arguments: ['@Afup\Site\Utils\Configuration']

    AppBundle\Mailchimp\EventEventSubscriber:
        arguments:
            - '@app.mailchimp_api'
            - "%mailchimp_members_list%"
        tags:
          - { name: kernel.event_listener, event: user.disabled, method: onUserDisabled }

    CCMBenchmark\TingBundle\Repository\RepositoryFactory: '@ting'
    CCMBenchmark\Ting\UnitOfWork: '@ting.unitofwork'
    KnpU\OAuth2ClientBundle\Client\ClientRegistry: '@knpu.oauth2.registry'

    AppBundle\Event\Ticket\QrCodeGenerator:
        autowire: true
        arguments: ["%qr_code_salt%"]

    AppBundle\Event\Form\TicketType:
        autowire: true
        tags:
          - {name: form.type}

    AppBundle\Site\Form\NewsFiltersType:
        autowire: true
        tags:
          - {name: form.type}

    Afup\Site\Forum\AppelConferencier:
        class: Afup\Site\Forum\AppelConferencier
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\AppelConferencier'

    Afup\Site\Forum\Forum:
        class: Afup\Site\Forum\Forum
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\Forum'

    Afup\Site\Utils\Pays:
        class: Afup\Site\Utils\Pays
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Utils\Pays'

    Afup\Site\Forum\Inscriptions:
        class: Afup\Site\Forum\Inscriptions
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\Inscriptions'

    Afup\Site\Association\Cotisations:
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Association\Cotisations'
        calls:
          - [setCompanyMemberRepository, ['@AppBundle\Association\Model\Repository\CompanyMemberRepository']]

    AppBundle\Event\Form\PurchaseType:
        autowire: true
        tags:
          - {name: form.type}

    AppBundle\Event\Validator\Constraints\LoggedInMemberValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\PublicTicketValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\CorporateMemberValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\AvailableTicketValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    Parsedown:
        class: Parsedown
        autowire: true

    geocoder:
        class: Geocoder\StatefulGeocoder
        arguments: ['@geocoder_provider_google_maps']

    geocoder_provider_google_maps:
        class: Geocoder\Provider\GoogleMaps\GoogleMaps
        arguments: ['@Psr\Http\Client\ClientInterface', null, "%google_maps_api_key%"]

    AppBundle\Offices\OfficeFinder:
        arguments: ['@geocoder']

    AppBundle\Event\Ticket\RegistrationsExportGenerator:
        arguments: ['@AppBundle\Offices\OfficeFinder', '@AppBundle\Association\UserMembership\SeniorityComputer', '@AppBundle\Event\Model\Repository\TicketRepository', '@AppBundle\Event\Model\Repository\InvoiceRepository', '@AppBundle\Association\Model\Repository\UserRepository']

    AppBundle\SpeakerInfos\Form\HotelReservationType:
        arguments: ["@translator"]
        tags:
          - {name: form.type}

    AppBundle\Association\Form\UserBadgeType:
        autowire: true
        tags:
            - {name: form.type}

    AppBundle\Subscriber\SitemapXmlSubscriber:
        autowire: true
        tags:
            - { name: "kernel.event_subscriber", priority: 100 }

    AppBundle\Association\Form\ContactDetailsType:
        autowire: true
        tags: [form.type]

    Twig_Extensions_Extension_Text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }

    Doctrine\DBAL\Configuration: ~
    Doctrine\DBAL\Connection:
        factory: [Doctrine\DBAL\DriverManager, 'getConnection']
        arguments:
            - {url: 'mysql://%database_user%:%database_password%@%database_host%:%database_port%/%database_name%?charset=utf8mb4'}
            - '@Doctrine\DBAL\Configuration'

    Symfony\Component\Routing\Generator\UrlGeneratorInterface:
        alias: 'router'
        public: true

    AppBundle\Github\GithubClient:
        arguments:
            $httpClient: '@http_client.github'

    AppBundle\Indexation\Meetups\MeetupClient:
        autowire: true
        arguments:
            $httpClient: '@http_client.meetup'

    AppBundle\SocialNetwork\Bluesky\BlueskyTransport:
        arguments:
            $httpClient: '@http_client.bluesky'
            $apiIdentifier: '%bluesky.api.identifier%'
            $apiAppPassword: '%bluesky.api.app_password%'

    AppBundle\VideoNotifier\Engine:
        autowire: true
        arguments:
            $transports: !tagged_iterator app.social_network.transport

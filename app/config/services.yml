# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
    twitter_api_settings:
        oauth_access_token: "%twitter_oauth_access_token%"
        oauth_access_token_secret: "%twitter_oauth_access_token_secret%"
        consumer_key: "%twitter_consumer_key%"
        consumer_secret: "%twitter_consumer_secret%"
    app.badge_dir: "%kernel.project_dir%/../htdocs/uploads/badges"
    app.members_logo_dir: "%kernel.project_dir%/../htdocs/uploads/members_logo"
    app.general_meetings_dir: "%kernel.project_dir%/../htdocs/uploads/general_meetings_reports"

services:
#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]
    _defaults:
        public: true

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        public:    false
        arguments:
            - 'mysql:host=%database_host%;port=%database_port%;dbname=%database_name%'
            - db_username: '%database_user%'
              db_password: '%database_password%'
              lock_mode: !php/const Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler::LOCK_NONE


    AppBundle\Command\:
        resource: '../../sources/AppBundle/Command/*'
        autowire: true
        autoconfigure: true

    AppBundle\Command\UpdateMailchimpMembersCommand:
        autoconfigure: true
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_api'
            $mailchimpMembersList: "%mailchimp_members_list%"

    AppBundle\Controller\:
        resource: '../../sources/AppBundle/Controller/*'
        autowire: true
        autoconfigure: true

    AppBundle\Controller\Admin\Site\AddRubriqueAction:
        autowire: true
        arguments :
            $storageDir: '%kernel.project_dir%/../htdocs/templates/site/images'

    AppBundle\Controller\Admin\Site\EditRubriqueAction:
        autowire: true
        arguments :
            $storageDir: '%kernel.project_dir%/../htdocs/templates/site/images'

    AppBundle\Controller\Admin\Members\BadgeNewAction:
        autowire: true
        arguments:
            $storageDir: '%app.badge_dir%'

    AppBundle\Controller\Website\BadgeController:
        autowire: true
        arguments:
            $storageDir: '%app.badge_dir%'

    AppBundle\Controller\Website\HomeController:
        autowire: true
        arguments:
            $homeAlgoliaEnabled: '%home_algolia_enabled%'

    AppBundle\Controller\Website\MeetupsController:
        autowire: true
        arguments:
            $algoliaAppId: '%algolia_app_id%'
            $algoliaFrontendApikey: '%algolia_frontend_api_key%'

    AppBundle\Controller\Website\CompanyPublicProfileController:
        autowire: true
        arguments:
            $storageDir: '%app.members_logo_dir%'

    AppBundle\Controller\Website\Member\CompanyPublicProfileController:
        autowire: true
        arguments:
            $storageDir: '%app.members_logo_dir%'

    AppBundle\Controller\Website\MemberShipController:
        autowire: true
        arguments:
            $storageDir: '%app.general_meetings_dir%'

    AppBundle\Controller\Website\NewsController:
        autowire: true
        arguments:
            $projectDir: '%kernel.project_dir%'

    AppBundle\Controller\Website\NewsletterController:
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_api'
            $mailchimpSubscribersList: '%mailchimp_subscribers_list%'

    AppBundle\Controller\Website\StaticController:
        autowire: true
        arguments:
            $superAperoCsvUrl: '%super_apero_csv_url%'

    AppBundle\Controller\Website\TalksController:
        autowire: true
        arguments:
            $algoliaAppId: '%algolia_app_id%'
            $algoliaFrontendApikey: '%algolia_frontend_api_key%'

    AppBundle\Controller\Website\TechletterController:
        autowire: true
        arguments:
            $mailchimpTechletterWebhookKey: '%mailchimp_techletter_webhook_key%'

    AppBundle\Controller\Website\TechnoWatchController:
        autowire: true
        arguments:
            $technoWatchCalendarKey: '%techno_watch_calendar_key%'
            $technoWatchCalendarUrl: '%techno_watch_calendar_url%'

    AppBundle\Controller\Admin\GetMenuAction:
        autowire: true
        arguments:
            $backOfficePages: '%app.pages_backoffice%'

    AppBundle\Controller\Admin\TechLetter\TechLetterGenerateController:
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_techletter_api'
            $techletterTestEmailAddress: '%techletter_test_email_address%'
            $mailchimpTechletterList: '%mailchimp_techletter_list%'

    AppBundle\Mailchimp\Runner:
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_api'
            $membersListId: '%mailchimp_members_list%'

    AppBundle\Controller\LegacyController:
        autowire: true
        arguments:
            $backOfficePages: '%app.pages_backoffice%'

    AppBundle\GeneralMeeting\GeneralMeetingRepository:
        autowire: true

    AppBundle\Security\MyGithubAuthenticator:
        autowire: true

    AppBundle\Security\TestGithubAuthenticator:
        autowire: true

    AppBundle\Indexation\Talks\Runner:
        autowire: true

    AppBundle\Event\Speaker\SpeakerPage:
        autowire: true

    AppBundle\Event\Form\EventSelectType:
        autowire: true
        autoconfigure: true

    AppBundle\Event\Form\SpeakerType:
        autowire: true
        autoconfigure: true

    AppBundle\Event\Model\Repository\GithubUserRepository:
        class: AppBundle\Event\Model\Repository\GithubUserRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\GithubUserRepository]

    AppBundle\Association\Model\Repository\CompanyMemberInvitationRepository:
        class: AppBundle\Association\Model\Repository\CompanyMemberInvitationRepository
        factory: ['@ting', get]
        arguments: [AppBundle\Association\Model\Repository\CompanyMemberInvitationRepository]

    AppBundle\Event\Model\Repository\RoomRepository:
        class: AppBundle\Event\Model\Repository\RoomRepository
        factory: ['@ting', get]
        arguments: [AppBundle\Event\Model\Repository\RoomRepository]

    AppBundle\Association\Model\Repository\SubscriptionReminderLogRepository:
        class: AppBundle\Association\Model\Repository\SubscriptionReminderLogRepository
        factory: ['@ting', get]
        arguments: [AppBundle\Association\Model\Repository\SubscriptionReminderLogRepository]

    AppBundle\Twig\TwigExtension:
        arguments: ['@AppBundle\Routing\LegacyRouter', "@Parsedown", '@AppBundle\Email\Parsedown', "@service_container"]
        tags:
            -  { name: twig.extension }

    AppBundle\Twig\AssetsExtension:
        arguments: ["%kernel.project_dir%"]
        tags:
            -  { name: twig.extension }

    AppBundle\Twig\OfficesExtension:
        tags:
            -  { name: twig.extension }

    AppBundle\Twig\ViewRenderer:
        autowire: true

    AppBundle\Association\Form\HelpMessageExtension:
        class: AppBundle\Association\Form\HelpMessageExtension
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\FormType }

    AppBundle\Listener\LocaleEventSubscriber:
        arguments: [ "%kernel.default_locale%" ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 100 }

    AppBundle\Event\Model\Repository\SpeakerRepository:
        class: AppBundle\Event\Model\Repository\SpeakerRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\SpeakerRepository]

    AppBundle\CFP\SpeakerFactory:
        arguments: ["@security.token_storage", '@AppBundle\Event\Model\Repository\SpeakerRepository']

    AppBundle\Security\TalkVoter:
        arguments: ['@AppBundle\Event\Model\Repository\SpeakerRepository']
        tags:
          - { name: security.voter }
        public: false

    AppBundle\CFP\PhotoStorage:
        arguments:
          - "%kernel.project_dir%/../htdocs/uploads/speakers"
          - "/uploads/speakers"
          - "%kernel.project_dir%/../htdocs"

    AppBundle\SpeakerInfos\SpeakersExpensesStorage:
        arguments:
            - "%kernel.project_dir%/../htdocs/uploads/speaker_expenses"
            - "/uploads/speaker_expenses"

    AppBundle\Event\Form\SpeakerFormDataFactory:
      autowire: true

    AppBundle\Event\Invoice\InvoiceService:
      autowire: true

    Twig_Extensions_Extension_Intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    AppBundle\Association\Model\Repository\UserRepository:
        class: AppBundle\Association\Model\Repository\UserRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\UserRepository]


    AppBundle\Event\Model\Repository\TalkRepository:
        class: AppBundle\Event\Model\Repository\TalkRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TalkRepository]

    AppBundle\Event\Model\Repository\TalkInvitationRepository:
        class: AppBundle\Event\Model\Repository\TalkInvitationRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TalkInvitationRepository]

    AppBundle\Event\Model\Repository\TalkToSpeakersRepository:
        class: AppBundle\Event\Model\Repository\TalkToSpeakersRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TalkToSpeakersRepository]

    AppBundle\Event\Model\Repository\VoteRepository:
        class: AppBundle\Event\Model\Repository\VoteRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\VoteRepository]

    AppBundle\Association\Model\Repository\CompanyMemberRepository:
        class: AppBundle\Association\Model\Repository\CompanyMemberRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\CompanyMemberRepository]

    AppBundle\Security\LegacyAuthenticator:
        autowire: true

    AppBundle\Security\LegacyHashAuthenticator:
        autowire: true

    AppBundle\Validator\Constraints\UniqueEntityValidator:
        autowire: true
        tags:
            - { name: validator.constraint_validator }

    AppBundle\LegacyModelFactory:
        autowire: true


    AppBundle\Association\CompanyMembership\SubscriptionManagement:
        autowire: true

    AppBundle\Payment\PayboxFactory:
        autowire: true
        arguments: ["@router", "%paybox_domain_server%", "%paybox_secret_key%", "%paybox_site%", "%paybox_rang%", "%paybox_identifiant%"]

    AppBundle\Slack\LegacyClient:
        arguments: ["%slack_members_legacy_token%"]

    AppBundle\Slack\UsersClient:
        autowire: true
        arguments: ["%slack_membre_token%", "%slack_api_url%"]

    AppBundle\Slack\UsersChecker:
        autowire: true

    AppBundle\Slack\MessageFactory:
        autowire: true

    AppBundle\Notifier\SlackNotifier:
        arguments:
            $postUrl: "%slack_url%"
            $messageFactory: '@AppBundle\Slack\MessageFactory'
            $serializer: '@jms_serializer.serializer'
            $httpClient: '@http_client'

    AppBundle\Routing\LegacyRouter:
        autowire: true

    Algolia\AlgoliaSearch\SearchClient:
        factory: [ Algolia\AlgoliaSearch\SearchClient, create ]
        arguments: ["%algolia_app_id%", "%algolia_backend_api_key%"]

    AppBundle\Joindin\JoindinComments:
        arguments: ["@cache.system"]

    AppBundle\Joindin\JoindinTalk:
        arguments: ["@cache.system"]

    TwitterAPIExchange:
        class: TwitterAPIExchange
        arguments: ["%twitter_api_settings%"]

    # API/Client Meetup techletter
    app.mailchimp_techletter_client:
        class: Mailchimp\Mailchimp
        arguments: ["%mailchimp_techletter_api_key%"]
        public: false
    app.mailchimp_techletter_api:
        class: AppBundle\Mailchimp\Mailchimp
        arguments: ["@app.mailchimp_techletter_client"]
        public: false

    # API/Client Meetup
    app.mailchimp_client:
        class: Mailchimp\Mailchimp
        arguments: ["%mailchimp_api_key%"]
        public: false
    app.mailchimp_api:
        class: AppBundle\Mailchimp\Mailchimp
        arguments: ["@app.mailchimp_client"]
        public: false

    AppBundle\TechLetter\MailchimpSynchronizer:
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_techletter_api'
            $listId: "%mailchimp_techletter_list%"

    AppBundle\Mailchimp\MailchimpMembersAutoListSynchronizer:
        autowire: true
        arguments:
            $mailchimp: '@app.mailchimp_api'
            $listId: "%mailchimp_members_list%"

    Afup\Site\Utils\Configuration:
        autowire: true

    AppBundle\Email\Mailer\Mailer:
        autowire: true

    AppBundle\Email\Mailer\Adapter\MailerAdapter:
      class: AppBundle\Email\Mailer\Adapter\PhpMailerAdapter
      factory: [AppBundle\Email\Mailer\Adapter\PhpMailerAdapter, createFromConfiguration]
      arguments: ['@Afup\Site\Utils\Configuration']

    AppBundle\Email\Emails:
        arguments: ['@AppBundle\Email\Mailer\Mailer']

    AppBundle\Association\CompanyMembership\InvitationMail:
        autowire: true

    AppBundle\Association\CompanyMembership\UserCompany:
        autowire: true

    AppBundle\Association\UserMembership\UserService:
        autowire: true

    AppBundle\Association\Factory\UserFactory:
        autowire: true

    AppBundle\Antennes\AntennesCollection:
        autowire: true

    AppBundle\Mailchimp\EventEventSubscriber:
        arguments:
            - '@app.mailchimp_api'
            - "%mailchimp_members_list%"
        tags:
          - { name: kernel.event_listener, event: user.disabled, method: onUserDisabled }

    AppBundle\Model\CollectionFilter:
        autowire: true

    AppBundle\Event\Talk\InvitationFormHandler:
      autowire: true

    AppBundle\Event\Talk\TalkFormHandler:
      autowire: true

    CCMBenchmark\TingBundle\Repository\RepositoryFactory: '@ting'
    CCMBenchmark\Ting\UnitOfWork: '@ting.unitofwork'
    KnpU\OAuth2ClientBundle\Client\ClientRegistry: '@knpu.oauth2.registry'

    AppBundle\Security\ActionThrottling\LogRepository:
        class: AppBundle\Security\ActionThrottling\LogRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Security\ActionThrottling\LogRepository]

    AppBundle\Event\Model\Repository\InvoiceRepository:
        class: AppBundle\Event\Model\Repository\InvoiceRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\InvoiceRepository]

    AppBundle\Association\Model\Repository\TechletterSubscriptionsRepository:
        class: AppBundle\Association\Model\Repository\TechletterSubscriptionsRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\TechletterSubscriptionsRepository]

    AppBundle\Association\Model\Repository\GeneralMeetingResponseRepository:
        class: AppBundle\Association\Model\Repository\GeneralMeetingResponseRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\GeneralMeetingResponseRepository]

    AppBundle\Association\Model\Repository\GeneralMeetingQuestionRepository:
        class: AppBundle\Association\Model\Repository\GeneralMeetingQuestionRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\GeneralMeetingQuestionRepository]

    AppBundle\Association\Model\Repository\GeneralMeetingVoteRepository:
        class: AppBundle\Association\Model\Repository\GeneralMeetingVoteRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Association\Model\Repository\GeneralMeetingVoteRepository]

    AppBundle\Security\ActionThrottling\ActionThrottling:
        autowire: true

    AppBundle\Event\Model\TicketFactory:
        autowire: true

    AppBundle\Event\Model\InvoiceFactory:
        autowire: true

    AppBundle\Event\Model\Repository\EventRepository:
        class: AppBundle\Event\Model\Repository\EventRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\EventRepository]

    AppBundle\Event\Model\Repository\EventCouponRepository:
        class: AppBundle\Event\Model\Repository\EventCouponRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\EventCouponRepository]

    AppBundle\Event\Model\Repository\EventStatsRepository:
        autowire: true

    AppBundle\Event\Model\Repository\BadgeRepository:
        class: AppBundle\Event\Model\Repository\BadgeRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\BadgeRepository]

    AppBundle\Event\Model\Repository\UserBadgeRepository:
        class: AppBundle\Event\Model\Repository\UserBadgeRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\UserBadgeRepository]

    AppBundle\Event\Model\Repository\SponsorTicketRepository:
        class: AppBundle\Event\Model\Repository\SponsorTicketRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\SponsorTicketRepository]

    AppBundle\Event\Model\Repository\TicketRepository:
        class: AppBundle\Event\Model\Repository\TicketRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TicketRepository]

    AppBundle\Event\Model\Repository\TicketTypeRepository:
        class: AppBundle\Event\Model\Repository\TicketTypeRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TicketTypeRepository]

    AppBundle\Event\Model\Repository\TicketEventTypeRepository:
        class: AppBundle\Event\Model\Repository\TicketEventTypeRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TicketEventTypeRepository]

    AppBundle\Event\Model\Repository\TicketSpecialPriceRepository:
        class: AppBundle\Event\Model\Repository\TicketSpecialPriceRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Event\Model\Repository\TicketSpecialPriceRepository]

    AppBundle\Site\Model\Repository\RubriqueRepository:
        class: AppBundle\Site\Model\Repository\RubriqueRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Site\Model\Repository\RubriqueRepository]




    AppBundle\Site\Model\Repository\ArticleRepository:
        class: AppBundle\Site\Model\Repository\ArticleRepository
        factory: ["@ting", get]
        arguments: [AppBundle\Site\Model\Repository\ArticleRepository]

    AppBundle\TechLetter\Model\Repository\SendingRepository:
        class: AppBundle\TechLetter\Model\Repository\SendingRepository
        factory: ["@ting", get]
        arguments: [AppBundle\TechLetter\Model\Repository\SendingRepository]


    AppBundle\Site\Form\RubriqueType:
        autowire: true
        autoconfigure: true

    AppBundle\Event\Ticket\SponsorTicketHelper:
        autowire: true

    AppBundle\Event\Ticket\SponsorTokenMail:
        autowire: true

    AppBundle\Event\Ticket\TicketTypeAvailability:
        autowire: true

    AppBundle\Event\Ticket\QrCodeGenerator:
        autowire: true
        arguments: ["%qr_code_salt%"]


    AppBundle\Association\Form\UserEditType:
        autowire: true
        autoconfigure: true

    AppBundle\Association\Form\CompanyEditType:
        autowire: true
        autoconfigure: true

    AppBundle\Event\Form\TicketType:
        autowire: true
        tags:
          - {name: form.type}

    AppBundle\Site\Form\NewsFiltersType:
        autowire: true
        tags:
          - {name: form.type}

    AppBundle\Planete\FeedFormType:
        autowire: true
        autoconfigure: true

    Afup\Site\Forum\AppelConferencier:
        class: Afup\Site\Forum\AppelConferencier
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\AppelConferencier'

    Afup\Site\Forum\Forum:
        class: Afup\Site\Forum\Forum
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\Forum'

    Afup\Site\Utils\Pays:
        class: Afup\Site\Utils\Pays
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Utils\Pays'

    Afup\Site\Forum\Inscriptions:
        class: Afup\Site\Forum\Inscriptions
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Forum\Inscriptions'

    Afup\Site\Association\Cotisations:
        factory: ['@AppBundle\LegacyModelFactory', 'createObject']
        arguments:
          - 'Afup\Site\Association\Cotisations'
        calls:
          - [setCompanyMemberRepository, ['@AppBundle\Association\Model\Repository\CompanyMemberRepository']]

    AppBundle\Event\Form\PurchaseType:
        autowire: true
        tags:
          - {name: form.type}

    AppBundle\Event\Validator\Constraints\LoggedInMemberValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\PublicTicketValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\CorporateMemberValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Validator\Constraints\AvailableTicketValidator:
        autowire: true
        tags:
          - { name: validator.constraint_validator }

    AppBundle\Event\Ticket\PurchaseTypeFactory:
        autowire: true

    AppBundle\Event\Sponsorship\SponsorshipLeadMail:
        arguments: ['@AppBundle\Email\Mailer\Mailer', "@translator", "@logger"]

    AppBundle\Event\AnonymousExport:
        autowire: true

    Parsedown:
        class: Parsedown
        autowire: true

    AppBundle\Email\Parsedown:
        autowire: true

    AppBundle\Event\JsonLd:
        autowire: true

    AppBundle\Offices\OfficeFinder:
        arguments: ['@Geocoder\Provider\GoogleMaps']

    Geocoder\Provider\GoogleMaps:
        arguments: ['@Ivory\HttpAdapter\CurlHttpAdapter', null, null, true, "%google_maps_api_key%"]

    Ivory\HttpAdapter\CurlHttpAdapter:
        public: false

    AppBundle\Association\UserMembership\StatisticsComputer:
        autowire: true

    AppBundle\Association\UserMembership\SeniorityComputer:
        arguments: ['@Afup\Site\Association\Cotisations']

    AppBundle\Association\UserMembership\BadgesComputer:
        arguments: ['@AppBundle\Association\UserMembership\SeniorityComputer', '@AppBundle\Event\Model\Repository\EventRepository', '@AppBundle\Event\Model\Repository\UserBadgeRepository', '@AppBundle\Association\Model\Repository\GeneralMeetingResponseRepository']

    AppBundle\Event\Ticket\RegistrationsExportGenerator:
        arguments: ['@AppBundle\Offices\OfficeFinder', '@AppBundle\Association\UserMembership\SeniorityComputer', '@AppBundle\Event\Model\Repository\TicketRepository', '@AppBundle\Event\Model\Repository\InvoiceRepository', '@AppBundle\Association\Model\Repository\UserRepository']

    AppBundle\Event\Talk\ExportGenerator:
        arguments: ['@AppBundle\Event\Model\Repository\TalkRepository']

    AppBundle\Event\Speaker\ExportGenerator:
        arguments: ['@AppBundle\Event\Model\Repository\TalkRepository']

    AppBundle\SpeakerInfos\Form\HotelReservationType:
        arguments: ["@translator"]
        tags:
          - {name: form.type}

    AppBundle\Association\Form\UserBadgeType:
        arguments:
            - '@AppBundle\Event\Model\Repository\BadgeRepository'
            - '@AppBundle\Event\Model\Repository\UserBadgeRepository'
        tags:
            - {name: form.type}

    AppBundle\Subscriber\SitemapXmlSubscriber:
        arguments:
            - "@router"
            - "@ting"
        tags:
            - { name: "kernel.event_subscriber", priority: 100 }

    AppBundle\Association\Form\ContactDetailsType:
        arguments: ['@Afup\Site\Utils\Pays']
        tags: [form.type]

    Twig_Extensions_Extension_Text:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }

    Doctrine\DBAL\Configuration: ~
    Doctrine\DBAL\Connection:
        factory: [Doctrine\DBAL\DriverManager, 'getConnection']
        arguments:
            - {url: 'mysql://%database_user%:%database_password%@%database_host%:%database_port%/%database_name%?charset=utf8mb4'}
            - '@Doctrine\DBAL\Configuration'


    Symfony\Component\HttpFoundation\Session\SessionInterface:
        alias: 'session'
        public: true

    Symfony\Component\Routing\Generator\UrlGeneratorInterface:
        alias: 'router'
        public: true

    PlanetePHP\FeedRepository:
        autowire: true

    PlanetePHP\FeedArticleRepository:
        autowire: true

    PlanetePHP\FeedCrawler:
        autowire: true
        public: true

    AppBundle\Github\GithubClient:
        arguments:
            $githubClient: '@http_client.github'

    AppBundle\Indexation\Meetups\MeetupClient:
        arguments:
            $httpClient: '@http_client.meetup'
            $antennesCollection: '@AppBundle\Antennes\AntennesCollection'
